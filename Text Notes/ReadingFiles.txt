Source: Ivor Horton - Beginning Java 7 - Chapter 11 - Reading files

3 ways in the Files class to read files
	1. newInputStream() method returns an InputStream object, to read a binary file.
	2. newBufferedReader() method returns a BufferedReader object,  to read a file containing character data.
	3. The newByteChannel() method returns a reference to a FileChannel object as type SeekableByteChannel
		This object can be used to read binary or character data from a file when the READ open option is in effect. 


newInputStream() - reading bytes
	Description
		Assumes READ opening option if no option provided
		Must be in a try-catch block
	Methods
		read() - reads a single byte from the stream buffer and returns it as a value of type int or -1 if the end of file reached
		read(byte[] bytes, int offset, int length) reads up to length bytes from the stream and stores them in the bytes array starting at index position offset. 
			Less than length bytes are read if there are fewer than this number of bytes available up to end-of-file. 
			Returns the actual number of bytes read as int or -1 if no bytes were read because EOF was reached. 
	Usage:
		try {
			BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(filename));...

newBufferedReader() - reading Characters
	Usage:
		BufferedReader inFile = Files.newBufferedReader(path, Charset.forName(“UTF-16”));

newByteChannel() - using channel to read data to a buffer
	Description
		If no options provided, READ is the default. Data is read to a buffer.
		The newByteChannel() method returns a reference of type SeekableByteChannel
	Usage
		Open a ReadByteChannel for simple read operations (READ is the default) 
			ReadableByteChanel rbc = Files.newByteChannel(filename);
		Open a channel casted to FileChannel, so file.position and int read(ByteBuffer[] buffers)) methods are available
			FileChannel readChannel = (FileChannel) Files.newByteChannel(filename, READ);
		
	Channels
															  / <- GatheringByteChannel
															  |
												/- Writable Byte Channel \ 
		AutoCloseable <- Closeable <- Channel <-						  <- ByteChannel <-SeekableByteChannel
												\- ReadableByteChannel   / 
																				ScatteringByteChannel
	Notes
	AllocateDirect()
		Benefit
			A direct buffer is faster if you are reading a lot of data from a file, as the data is transferred directly from the file to our buffer+ check todo list leaders
	
	Direct data transfer between channels (transferTO and transferFrom)
		Benefits
			The value of these methods lies in the potential for using the I/O capabilities of the underlying operating system directly
			Where this is possible, the operation is likely to be much faster than copying from one file to another in a loop using the read() and write() methods you have seen.
		transferTo(long position, long count, WritableByteChannel dst) 
			From THIS channel opened to read to the channel that is opened to write
			A channel that was opened for reading supports only the transferTo() method. 
		transferFrom(ReadableByteChannel src, long position, long count))
			From the src channel, transfer bytes to THIS channnel (must be opened for write)
			A channel that was opened for writing supports only the transferFrom() method. 

MemoryMappedFiles - MappedByteBuffer - mappedByteBuffer = fileChannel.map(READ_WRITE, 0L, fileSize).load();
	Source
		Horton, p439, Chapter 11 - Reading files
	Benefits
		A memory-mapped file is a file that has its contents mapped into an area of virtual memory in your computer.
		This enables you to reference or update the data in the file directly without performing any explicit file read or write operations on the physical file yourself.  
		When you reference a part of the file that is not actually in real memory, it is automatically brought in by your operating system.
		Because of the potentially immediate availability of the data it contains, a memory-mapped file is particularly useful when you need to access the file randomly. 
		Your program code can reference the data in the file just as though it were all resident in memory.
	Drawbacks
		Unless the file is large, using a mapped byte buffer is typically slower than using the read() and write() methods for a channel
	Creating
		The map() method for a FileChannel object returns a reference to a buffer of type MappedByteBuffer that maps to a specified part of the channel’s file:
		MappedByteBuffer map(int mode, long position, long size)
		Map modes
			MapMode.READ_ONLY (channel must be opened READ only) 
			MapMode.READ_WRITE (channel must be opened READ, WRITE) The changes might or might not be visible to other users who have mapped the same file.
			MapMode.PRIVATE (channel must be opened READ, WRITE) You can access or change the buffer, but changes are not propagated to the file and are not visible to users who have mapped the same file.
	MappedByteBuffer methods
		force() - forces any changes that you make to the buffer’s contents to be written to the file and returns a reference to the buffer
		load() - Tries on a “best efforts” basis to load the contents of the buffer into memory and returns a reference to the buffer.
		isLoaded() - Returns true if it is likely that this buffer’s contents are available in physical memory and false otherwise.

Locking Files - on MemoryMapped files
		A lock on a file is encapsulated by an object of the java.nio.channels.FileLock class. 
	Shared lock
		A shared lock allows several processes to have concurrent read access to the file. 
	Exclusive lock
			An exclusive lock gives you exclusive access to the file; no one else can access the file while you have the exclusive lock. Useful when creating a checksum for example
		.lock()
			The lock() method for a FileChannel object tries to obtain an EXCLUSIVE lock on the channel’s entire file. 
			No other program or thread can access the file while this channel holds the lock. 
			A PREREQUISITE for obtaining an exclusive lock is that the file has been opened for both reading and writing.
			If another program or thread already has a lock on the file, the lock() method BLOCKS 
			(i.e., does not return) until the lock on the file is released and can be acquired by this channel
		.tryLock()
			 It either returns a reference to a valid FileLock object or returns null if the lock could not be acquired. 
	Verifying lock
		isValid() method for a FileLock object to determine whether it is valid. A return value of true indicates a valid lock
	Locking Part of a File
		.lock(long position, long size, boolean shared)
		.tryLock(long position, long size, boolean shared)
		The effect of a shared lock is to prevent an exclusive lock being acquired by another program that overlaps the region that is locked. 
	Overlapping locks
		A shared lock DOES permit another program to acquire a SHARED lock on a region of the file that may overlap the region to which the original shared lock applies
		A single Java Virtual Machine (JVM) does not allow overlapping locks, so different threads running on the same JVM cannot have overlapping locks on a file. 
		If you want to test for the presence of an overlapping lock, you can call the overlaps() method for your lock object.
