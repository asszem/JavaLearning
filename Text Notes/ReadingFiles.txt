Source: Ivor Horton - Beginning Java 7 - Chapter 11 - Reading files

3 ways in the Files class to read files
	1. newInputStream() method returns an InputStream object, to read a binary file.
	2. newBufferedReader() method returns a BufferedReader object,  to read a file containing character data.
	3. The newByteChannel() method returns a reference to a FileChannel object as type SeekableByteChannel
		This object can be used to read binary or character data from a file when the READ open option is in effect. 


newInputStream() - reading bytes
	Description
		Assumes READ opening option if no option provided
		Must be in a try-catch block
	Methods
		read() - reads a single byte from the stream buffer and returns it as a value of type int or -1 if the end of file reached
		read(byte[] bytes, int offset, int length) reads up to length bytes from the stream and stores them in the bytes array starting at index position offset. 
			Less than length bytes are read if there are fewer than this number of bytes available up to end-of-file. 
			Returns the actual number of bytes read as int or -1 if no bytes were read because EOF was reached. 
	Usage:
		try {
			BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(filename));...

newBufferedReader() - reading Characters
	Usage:
		BufferedReader inFile = Files.newBufferedReader(path, Charset.forName(“UTF-16”));

newByteChannel() - using channel to read data to a buffer
	Description
		If no options provided, READ is the default. Data is read to a buffer.
		The newByteChannel() method returns a reference of type SeekableByteChannel
	Usage
		Open a ReadByteChannel for simple read operations (READ is the default) 
			ReadableByteChanel rbc = Files.newByteChannel(filename);
		Open a channel casted to FileChannel, so file.position and int read(ByteBuffer[] buffers)) methods are available
			FileChannel readChannel = (FileChannel) Files.newByteChannel(filename, READ);
		
	Channels
															  / <- GatheringByteChannel
															  |
												/- Writable Byte Channel \ 
		AutoCloseable <- Closeable <- Channel <-						  <- ByteChannel <-SeekableByteChannel
												\- ReadableByteChannel   / 
																				ScatteringByteChannel
	Notes
	AllocateDirect()
		Benefit
			A direct buffer is faster if you are reading a lot of data from a file, as the data is transferred directly from the file to our buffer+ check todo list leaders
	
	Direct data transfer between channels
		Benefits
			The value of these methods lies in the potential for using the I/O capabilities of the underlying operating system directly
			Where this is possible, the operation is likely to be much faster than copying from one file to another in a loop using the read() and write() methods you have seen.
		transferTo(long position, long count, WritableByteChannel dst) 
			From THIS channel opened to read to the channel that is opened to write
			A channel that was opened for reading supports only the transferTo() method. 
		transferFrom(ReadableByteChannel src, long position, long count))
			From the src channel, transfer bytes to THIS channnel (must be opened for write)
			A channel that was opened for writing supports only the transferFrom() method. 
		
