FileSystem objects
	The starting point for working with files and directories is a java.nio.file.FileSystem object
	It encapsulates the file storage system on your computer. You can use this object to access the files and directories within the file system.
	The FileSystem class has no public constructors, the java.nio.file.FileSystems [note the FileSystemS] class defines static factory methods for file systems. 
	You can obtain the FileSystem object that encapsulates the storage system on your machine by calling the getDefault() method that is defined in the FileSystems class
		FileSystem fileSystem = FileSystems.getDefault();

FileStore objects
	After you have a FileSystem object representing the file system on your machine, you can identify the devices and partitions within it as java.nio.FileStore objects. 
	To obtain the file stores on your computer, you call getFileStores() for the FileSystem object:
		Iterable<FileStore> stores = fileSystem.getFileStores();

Path objects
	Sources:
		https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html
	A java.nio.file.Path object encapsulates a system-dependent file path to a file or directory. 
	Path is an interface type so you cannot create Path objects directly.
	Methods to create Path objects:	
		(1) using the getPath method on a FileSystem object
			FileSystem fileSystem = FileSystems.getDefault();
			Path path = fileSystem.getPath("garbage.java");
		(2) using the java.nio.file.Paths helper class (needs to be imported)
			Path path = Paths.get(System.getProperty("user.dir"));
			path = fileSystem.getPath("E:", "javaTest", "subdirectory", "test.txt");
	Relative vs. Absolute Path
		A path that includes a prefix is an absolute path: E:\GitHub\
		A path without a prefix is a relative path: \GitHub\Java
	The last name in a path can be a directory name or a file name. All other names must be directory names.
	Resolve and Relativize
		To resolve: 
			to combine different paths together
			to pass in a partial path (does not include a root element), and that partial path is appended to the original path.
			Examples:
				p1=E:\\javaFileOp\\test
				p2=secondTest
				p1.resolve(p2) --> E:\\javaFileOp\\test\\secondtest
		To relativize:
			to construct a path from one location in the file system to another location. 
			Constructs a path originating from the original path and ending at the location specified by the passed-in path. The new path is relative to the original path. 
			Examples:
				Path p1 = Paths.get("joe");
				Path p2 = Paths.get("sally");
				// Result is ../sally
				Path p1_to_p2 = p1.relativize(p2);
				// Result is ../joe
				Path p2_to_p1 = p2.relativize(p1);
		Resolve + relatív path = a forrás végéhez teszi hozzá
		ResolveSibling + relatív path = a forrás szülőmappájával egy szintre teszi
		Resolve + absolute = lecseréli az abszolút útvonalra

System Properties
	A system property specifies values for parameters related to the system environment in which your program is executing. 
	Each system property is identified by a unique name and has a value associated with the name that is defined as a string
	Examples:
		Get all properties to one object
			Properties sys = System.getProperties();
		List all properties:
			sys.list(System.out);
		Get specific properties only
			System.out.println("user.name:\t"+sys.getProperty("user.name"));
			String currentDir = System.getProperty(“user.dir”);
			String separator = System.getProperty(“file.separator”);

Querying Files and Directories - java.nio.file.attribute.BasicFileAttributes
	java.nio.file.Files class defines static methods that provide a wide range of operations with paths, files and directories
	Examples
		Test if a path object points to an existing file:
			Files.exists(path)
	The BasicFilesAttributes interface defines methods to get information about a directory or file path.
		import required:
			import java.nio.file.attribute.BasicFileAttributes;
		example (must be in a try block):
			try{
				BasicFileAttributes attr = Files.readAttributes(path, BasicFileAttributes.class);
				} catch(IOException e) {
				System.err.println(e);
				}

DirectoryStream<Path> - java.nio.file.Files class
	The newDirectoryStream() method in the Files class provides you with the means to access the contents of a directory as a stream of Path objects. 
	The method returns a reference of type java.nio.file.DirectoryStream<Path>, which is an interface type.
	DirectoryStream<Path> is a generic type, which is a parameterized type where the type parameter appears between the angled brackets
	so this is a DirectoryStream type customized to work with Path objects
	Because the DirectoryStream<Path> type implements Iterable<Path>, you can use the collection-based for loop to access the Path objects in the stream.
	Can be used in a try-with-resources block
	Example:
		try (DirectoryStream<Path> mappaStream = (filter == null ?  Files.newDirectoryStream(dirPath) : Files.newDirectoryStream(dirPath, filter))) {
		....} catch (IOException e) {...}

Create Directories - java.nio.file.Files class
	Create Single Directory - must by in a try-catch block
		Files.createDirectory(path)
	Create Multiple Directories
		Files.createDirectories(path);
		If any of the subdirectories of the final directory do not exist, they are created. 
		When you are creating a new directory that you specify by an absolute path, using the createDirectories() method obviates the need to verify that the parent exists

Create files - java.nio.file.Files class
	Files.createFile(path)
	Possible Exceptions
		FileAlreadyExistsException - if the file already exists
		IOException - if an I/O error occurs. 
		NoSuchFileException - if the parent directory does not exist.
	Tipp: use the createDirectories on path.GetParent() to make sure the parent dir exists
		Files.createDirectories(path.getParent()); 
		Files.createFile(path);k

Delete files/directory - java.nio.file.Files class
	Files.delete()
	Note: A directory has to be empty before it can be deleted
	Tipp: first delete the file, and then the directory
		Files.delete(path); // Delete file
		Files.delete(path.getParent()); // Delete parent directory

Copy/Move files/directories - java.nio.file.Files class
	move(Path Source, Path Target, [CopyOption])
		The static move() method in the Files class enables you to move/rename a file or directory. 
		A directory can only be moved if either it is empty, or if the operation does not require that its contents be moved — that is, essentially renaming the directory.
		Target path - It is not the path for the directory that contains the item after the move operation, but the path specification for the item after it has been moved. 
		CopyOptions
			Defined in java.nio .file.StandardCopyOption 
				REPLACE_EXISTING, which indicates the target file specified by the first argument should be replaced if it exists and is not a non-empty directory
				ATOMIC_MOVE, which specifies that the move is executed as an atomic operation, which is an operation that cannot be interrupted by another thread of execution.
	rename
		A move() operation renames a file or directory if the parent paths of the source and destination paths are the same, and both reference a file or both reference a directory

Sources
	Books
		Ivor Norton - Beginning Java - Chapter 9 - Accessing Files and Directories
		Ivor Norton - Beginning Java - Chapter 
		Ivor Norton - Beginning Java - Chapter 
