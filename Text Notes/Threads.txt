Summary
.run() vs .main() vs. call()

Creating Threads
	Implement Runnable vs. Extend Thread
		Because Java allows only a single base class, if you derive your class from Thread, it can't inherit functionality from any other class.
		The Runnable interface declares only one method, run(), and this is the method that is executed when the thread is started.
		Either cases, the run() method needs to be implemented
			@Override
			public void run(){....
	Creating threads with Thread
		Thread first = new MyThreadObject(constructorArguments);				//Constructor should define the setDaemon as well
	Creating threads with Runnable
		Thread first = new Thread(new myThreadObject(constructorArguments));
		first.setDaemon(true);
		Thread second = new Thread(objectReference, "Thread Name String");
Methods for Thread objects
	.run()
		The .run() method is never called to start a thread. 
		The .run() method is the first method in the thread's call stack. 
		All the methods that are called directly or indirectly from the run() method for an object are all part of the same thread, but they clearly don't have to be methods for the same Thread object. 
	.start()
		The .start() method is called to start a thread, it will create a new call stack, starting with .run() method of the started thread object
	.sleep()
	.interrupt()
	.isInterrupted()
	.interrupted()
	.join()
	.yield()
		When you call the sleep() method for a thread, the thread does not continue for at least the time you have specified as an argument, even if no other threads are waiting. 
		Calling yield(), on the other hand, causes the current thread to resume immediately if no threads are waiting
	.getName()
		if thread was constructed with providing name
	.setName()
	.currentThread()
		The static currentThread() method in the Thread class returns a reference to the current thread so that provides access when you need it.
Synchronization
	The Danger of Multithreads
		A thread can be interrupted while a source statement is executing. 
		Where two or more threads share a common resource (a file or a block of memory)
		it needs to be ensured that one thread doesn't modify a resource while that resource is still being used by another thread.
	Objective
		The objective of synchronization is to ensure that when several threads want access to a single resource, only one thread can access it at any given time. 
		Method level sync
			You can manage code at the method level. This involves synchronizing methods.
		Block level sync
			You can manage code at the block level. This uses synchronizing blocks.
	Method Synchronization
		Syncing methods will make them mutually exclusive for the SAME object. Even for the concurrent execution of the SAME method.
		Only when the currently executing synchronized method for an object has ended can another synchronized method start FOR THE SAME OBJECT. 
		When a thread executes a synchronized method for an object, it is assured exclusive access to the object insofar as the synchronized methods in that object are concerned.
		Synchronizing INSTANCE methods
			Distinction between an object that has instance methods declared as synchronized in the class definition and the threads of execution that might use them.
			The method that isn't declared as synchronized, can always be executed by a thread, regardless of whether a synchronized method is executing in some other thread.
			Two synchronized method can run at the same time on DIFFERENT objects
			Lock on objects
				Every object has a LOCK. If synchronized, only the method that locked the process can use it, other's need to wait to get the lock.
				The lock is set by a locking action (starting a synchronized method)
				The lock is reset by an unlock action
		Synchronizing STATIC methods
			If a static method is declared as synchronized, only one of those static methods in the class can be executing at any point in time.
			This is per-class synchronization, and the class lock is independent of any locks for objects of the class.
	Code Block Synchronization
		Description 
			You can set a lock on any object for a given statement block. 
			No other statements or statement blocks in the program THAT ARE SYNCHRONIZED ON THE OBJECT can execute while this statement is executing.
			When the block that is synchronized on the given object is executing, no other code block or method that is synchronized on the same object can execute.
		Synced Code blocks can be anywhere in the program
			Code blocks that are synchronized with respect to a particular object don't have to be in the same class. 
			They can be anywhere in the program where the appropriate object can be specified.
		Block vs. method synchronization
			You can specify which particular object is to benefit from the synchronization of the statement or code block
			Not just the object that contains the code as in the case of a synchronized method. 
		Declaration	
			synchronized(theObject) {
				statement; // Synchronized with respect to theObject
				...
				}
		Analogy - baton in a relay race (váltóbot)
			The object in a synchronized code block acts rather like a baton in a relay race that serves to synchronize the runners in the team. 
			Only the runner with the baton is allowed to run. The next runner in the team can run only after he gets hold of the baton. 
			There can be several different batons as there are several sets of runners (teams). 
			In the same way, you can specify several different sets of synchronized code blocks in a class, each controlled by a different object. 
Deadlocks
	When a locked object waits for another object which is also locked by another thread and that thread in turn waits for the locked object then a deadlock occurs

Callable<V> interface
	The Callable<> interface specifies just one method, call(), that a Callable<> object must implement. 
	The call() method is the equivalent of the run() method in the Runnable interface, but in addition returns a value when the method terminates. 
	The type parameter, V, for the interface is the type of the value to be returned by the class.
	Callable can NOT be passed to a Thread constructor, Executor Service must be used

Executors
	An executor is an object that you can use to start and manage threads. It can execute a Runnable or Callable task
	Creating Executors - java.util.concurrent.Executors class provides static FACTORY methods to create executors
		Step 1. - create an ExecutorService object to get a threadPool
			Unlimited threads
				Either an existing thread in the pool that is currently no longer running is used, or a new thread is created and added to the thread pool. I
					ExecutorService threadPool = Executors.newCachedThreadPool()				
			Limited threads
				If all threads in the pool have been allocated, the new task is placed in a queue to wait until one of the existing threads becomes free. 
					int nThreads = 5;
					ExecutorService threadPool = Executors.newFixedThreadPool(nThreads);		
			???return a reference to an object of type ThreadPoolExecutor???
		Step 2. - starting tasks using the ExecutorService Object
			Starting a Runnable task with .submit()
				The submit() method returns a reference of type java.util.concurrent.Future<V> 
				This reflects the state of the task at any time, and eventually encapsulates the result of executing a task, the result being of type V. 
				A Runnable task does not return a result so the value returned by submit will be of type Future<?>
					Future<?> futureObject = threadPool.submit(new runnableClass());
			Starting a Callable task with .submit()
				The future object encapsulates the result of executing the task that. In the example below, it is an object of type String.
					Future<String> futureObject = threadPool.submit(callableTask);
	Using FUTURE objects
		The Future<> reference that the submit() method returns is returned immediately, before the task completes execution. 
		The Future<> object therefore provides a way to access the executing task and determine its state. 
		Cancel tasks 
			if(future.cancel(true)) {
				System.out.println(“Task has been cancelled.”);
				} else {
				System.out.println(“Task could not be cancelled.”);
				}
			isCancelled(), isDone() to determine if a task was cancelled or is done (cancellation also makes the Done true)
		Get return of Callable - .get()
			The get() method will block if the task is still running and returns the result when the task has completed
		Shutting down - .shutdown()
			threadPool.shutdown()
				Calling shutdown() for an ExecutorService object starts the process of shutting down a thread pool by closing it to new tasks. 
				Existing tasks continue to run. You typically want to wait for tasks in a thread pool to complete before closing it
			.awaitTermination(timeValue, TimeUnit)
				The awaitTermination() waits for tasks in the thread pool to complete for the time you specify by the two arguments. 
				The method returns false if all the tasks did not complete in that timeframe.
			.shutdownNow()
				The method returns a reference to a list containing references to those tasks in the thread pool that were waiting to start execution when shut down occurred.
				List<Runnable> tasks = threadPool.shutdownNow();	
			isTerminated()
				This method returns true if either shutdown() or shutdownNow() has been called and all tasks have ended
			isShutdown()
				Returns true if the executor service object is shutdown

TreadRace_Demo
	Running 3 threads (including main) parallel with same task will produce unpredictable completion order. Because we can't control how the Java scheduler assigns RUNNING status to threads

Thread status
	Runnable - Running - Blocked


Tipps & Best Practices
	Debugging Threads
		Set Eclipse to suspend JVM at breakpoints, don't keep other threads running -- but it doesn't work properly some cases 

Sources
	Horton Chapter 16. - Threads
	Schildt Chapter 11. - Multithread programming
	Head First Chapter 15 - Networking and threads
