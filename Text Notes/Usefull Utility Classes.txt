java.util.Arrays
	.sort()
	.fill()
		fills ALL elements in the range with the same values
	.copyOf() / .copyOfRange()
		result array can be smaller or greater than source array. 
	.equals()
		can use a Comparator object, or the argument object's compareTo() method
	.binarySearch()
		Uses Binary Search - The binary search algorithm works by repeatedly subdividing the sequence of elements to find the target element value.
		This works only if the elements of the array are in ascending sequence, so if they are not, you should call the sort() method before calling binarySearch().
		Return value
			Found
				Return is the result of the index position of the element that is equal to the target
			Not found
				Negative integer returned.	This is produced by 
					a) taking the value of the index position of the first element that is greater than the value 
					b) reversing its sign
					c) subtracting 1
					This mechanism guarantees that if the value sought is not in the array then the return value is always negative.
				Example
					int[] numbers = { 2, 4, 6, 8, 10 };
					int positionNotInArray = java.util.Arrays.binarySearch(numbers, 7);  			//results -4
					The value of position is -4 because the element (number '8') at index position 3 is the first element that is greater than 7. 
					The return value is calculated as -3-1, which is -4. 
		Example
			find 8 in 5,6,7,8,20,25,32,43,54
				middle: 20, greater than the search, take the left half between 20 and 5
				middle: 7, smaller than the search, take the rigth half between 7 and 20
				middle: 8 - found it!
			This is why the array must be sorted ascending

java.util.Observable & java.util.Observer
	Concept - separating Document/View
		When the Document object changes, all the Views need to be notified that a change has occurred, because they may well need to update what they display. 
		The document is observable, and the views are observers.
		This is exactly what the Observable class is designed to achieve when used in combination with the Observer interface. 
		A document can be considered to be an Observable object, and a view can be thought of as an Observer object. This enables a view to respond to changes in the document.
		The document/view architecture portrays a many-to-many relationship. A document may have many observers, and a view may observe many documents.
	Document Vs. View
		A document has permanence because it represents the data for an application. 
		A view is a transient presentation of some or all of the data in the document, so a document object should naturally create and own its view objects.
		A view is responsible for managing the interface to the application's user
		but the update of the underlying data in the document object would be carried out by methods in the document object, which would then notify other view objects that a change has occurred.
	Define the Observable class
		Class definition
			public class Document extends Observable {
				// Details of the class definitions...
			}
	Define the Observer classes
		Class Definition
			public class View implements Observer {
				// Method for the interface
				public void update(Observable theObservableObject, Object arg) {
					// This method is called when the observed object changes
				}
				// Rest of the class definition...
			}
		The update() method
			1st argument:
				A reference to the Observable object that changed and caused the method to be called.  
				This enables the View object to access public methods in the associated Observable object that would be used to access the data to be displayed.
			2nd argument: TBD!!!
	Inside the OBSERVABLE class methods
		The Observable class maintains an internal record of all the Observer objects related to the object to be observed.
		int countObservers()
			Returns the number of Observer objects for the current object.
		void addObserver(Observer o)
			Adds the object you pass as the argument to the internal record of observers. 
			Only Observer objects in the internal record are notified when a change in the Observable object occurs.
		void deleteObserver(Observer o)
			Deletes the object you pass as the argument from the internal record of observers.
		void deleteObservers()
			Deletes all observers from the internal record of observers.
		void setChanged()
			Sets the current object as changed. You must call this method before calling the notifyObservers() method. Note that this method is protected.
		void clearChanged()
			 Resets the changed status of the current object to unchanged. Note that this method is also protected. This method is called automatically after notifyObservers() is called
		boolean hasChanged()
			Returns true if the object has been set as changed and returns false otherwise.
		void notifyObservers(Object arg)
			Calls the update() method for all of the Observer objects in the internal record if the current object has been set as changed. 
			The current object is set as changed by calling the setChanged() method. 
			The current object and the argument passed to the notifyObservers() method are passed to the update() method for each Observer object. 
		void notifyObservers()
			Calling this method is equivalent to calling the previous method with a null argument.

java.util.Random
	Description
		Random objects that you create using the same seed always produce the same sequence, which can be very important when you are testing a program. 
		Testing a program where the output is not repeatable can be a challenge! 
		A major feature of random number generators you create using a given seed in Java is that not only do they always produce the same sequence of pseudo-random numbers,
		but they also do so on totally different computers.
	Examples
		Random zeroAndNinety = new Random();
		zeroAndNinety.setSeed(12345L);		//Set the seed
		zeroAndNinety.nextInt(91) 			//Limit is exclusive

Dates and Time
A Date class object represents a given date and time
The Date class implements the Comparable<Date> interface so you have the compareTo() method
available.
The
presence of this method in the class means that you can use the sort() method in the Arrays class to sort
an array of Date objects, or the sort() method in the Collections class to sort a collection of dates.
Because the hashCode() method is also implemented for the class, you have all you need to use Date
objects as keys in a hash map

				

