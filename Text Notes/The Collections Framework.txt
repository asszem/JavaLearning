The Collections Framework
	Description
		A collection class is simply a class that organizes a set of objects of a given type in a particular way
		The Java collections framework is a set of generic types that you use to create collection classes that support various ways for you to store and manage objects of any kind in memory.k
		A class that defines collections of objects is often referred to as a CONTAINER CLASS
		IMPORTANT! In Java, collections store references only — the objects themselves are external to the collection.
	Key items
		The Iterator<T> interface type declares methods for iterating through elements of a collection, one at a time. 
		The Vector<T> / ArrayList<T> type supports an array-like structure for storing objects. The number of objects that you can store in a Vector<T> object increases automatically as necessary.
		The Stack<T> type supports the storage of objects in a pushdown stack.
		The LinkedList<T> type supports the storage of objects in a doubly-linked list, which is a list that you can iterate through forward or backward.
		The EnumSet<E> type stores constants of a given enum type, E, in a set. 
		The HashMap<K,V> type supports the storage of objects of type V in a hash table, sometimes called a map. 
			An object is stored using an associated key object of type K. To retrieve an object you just supply its associated key.
	Collection Types
		Sets
			The objects are not ordered in any particular way at all, and objects are simply added to the set without any control over where they go.
			You can
				Iterate over members in set
				Check if a given object is a member of a set
				Remove object from a set (only if the reference is known)
				Ordered (set must implement compareTo method of Comparable<T> interface)
			You cannot 	
				Have duplicate objects in a set — each object in a set must be unique.
			Set collection types
				HashSet<T>
					Implements a set using HashMap<T> under the covers. 
					Although a set is by definition unordered, there has to be some way to find an object reasonably efficiently. 
					Using a HashMap<T> object to implement the set enables store and retrieve operations to be done in a constant time. 
					However, the order in which elements of the set are retrieved might vary over time.
				LinkedHashSet<T>
					Implements a set using a hash table with all the entries in a doubly-linked list. 
					This class can be used to make a copy of any set such that iteration ordering is preserved — something that does not apply to a HashSet<>.
				TreeSet<T>
					Implements a set that orders the objects in ascending sequence. 
					This means that an iterator obtained from a TreeSet<T> object provides the objects in ascending sequence. 
					You can also search the set for the closest match to a given item.
				EnumSet<E extends Enum<E>>
					Implements a specialized set that stores enum values from a single enum type, E.
		Sequences(Lists)
			The objects are stored in a linear fashion, not necessarily in any particular order, but organized in an arbitrary fixed sequence with a beginning and an end. 
			Typical sequneces: arrays, LinkedList, stacks(LIFO), queue(FIFO), Vector, Victor, ArrayList
			You can
				Add object to the beginning/end of a list
				Insert object at a given point to the list
				Iterate backward and forward
				Have duplicate objects in a list - to store several copies of the same object at different places in the sequence
			List Collection Types
				Vector<T> - Synchronized
					Implements a list as an array that automatically increases in size to accommodate as many elements as you need. 
					Objects are stored and retrieved using an integer index. 
					You can also use an iterator to retrieve objects from a Vector<>. 
					The Vector<> type is synchronized — that is, it is well behaved when concurrently accessed by two or more threads.
						Why is Vector() obsolete or deprecated?
							Vector synchronizes on each individual operation. That's almost never what you want to do.  
							Generally you want to synchronize a whole sequence of operations. 
							Synchronizing individual operations is 
								less safe
									if you iterate over a Vector, you still need to take out a lock to avoid anyone else changing the collection at the same time
									which would cause a ConcurrentModificationException in the iterating thread
								 slower
									why take out a lock repeatedly when once will be enough
							Source
								http://stackoverflow.com/questions/1386275/why-is-java-vector-class-considered-obsolete-or-deprecate
				ArrayList<T> - Unsynchronized
					Implements an array that can vary in size and can also be accessed as a linked list.
					This provides a similar function to the Vector<T> generic type but is unsynchronized, so it is not safe for use by multiple threads.
				Stack<T>
					This class is derived from Vector<T> and adds methods to implement a stack — a last-in, first-out storage mechanism.
				LinkedList<T>>
					Implements a linked list. The linked list defined by this class can also be used as a stack or a queue.
			Queue Collection Types
				ArrayDeque<T>
					Implements a resizable array as a double-ended queue.
				PriorityQueue<T>
					Implements a priority queue in which objects are ordered in ascending sequence from the head of the queue. 
					The order is determined either 
						by a Comparator<T> object supplied to the constructor for the collection class, 
						by the compareTo() method declared in the Comparable<T> interface that the object type implements.
		Maps
			Each entry must be a Key:Value pair
			A key can be any kind of object that you want to use to reference the stored objects. 
			Because a key has to uniquely identify an object, all the keys in a map must be different.
			Hashing
				The locatione where a key/object pair is stored in a map is determined from the key by a process known as hashing
				Hashing processes the key object to produce an integer value called a hashcode. 
				The hashcode for a key is typically used to calculate an offset from the start of the memory that has been allocated within the map for storing objects
				and the offset determines the location where the key/object pair is stored.
			Map Collection Types
			Hashtable<K,V> - syncronized, nulls not allowed
				Implements a map with keys of type K and values of type V where ALL KEYS MUST BE NONNULL. 
				The key class must implement the hashcode() and equals() methods to work effectively. 
				This type, like Vector<T>, is synchronized, so it's safe for concurrent use by two or more threads.
			HashMap<K,V> - unsyncronized, nulls allowed
				Implements a map where objects of type V are stored using keys of type K. 
				This collection allows null objects to be stored and allows a key to be null (only one of course, because keys must be unique). 
				The map is not synchronized.
			LinkedHashMap<K,V>
				Implements a map storing values of type V using keys of type K with all of its entries in a doubly-linked list. 
				This class can be used to create a copy of a map of any type such that the order of the entries in the copy is the same as the original.
			WeakHashMap<K,V>
				Implements a map storing values of type V using keys of type K such that if a reference to a key no longer exists outside the map, the key/object pair is discarded. 
				This contrasts with HashMap<> where the presence of the key in the map maintains the life of the key/object pair
				even though the program using the map no longer has a reference to the key and therefore cannot retrieve the object.
			IdentityHashMap<K,V>
				Implements a map storing values of type V using keys of type K using a hash table where comparisons in searching the map for a key or a value compares references, not objects.
				This implies that two keys are equal only if they are the same key. The same applies to values. 
				This is a specialized collection class for situations where reference equality is required for both keys and objects.
			TreeMap<K,V>: 
				Implements a map storing values of type V using keys of type K such that the objects are arranged in ascending key order.
	Iterators
		An iterator is a standard mechanism for accessing elements in a collection.
		Any collection object that represents a SET or a SEQUENCE can create an object of type java.util.Iterator<> that behaves as an iterator
		Most collection classes provide an iterator() method that returns an iterator for the current contents of the collection
		An iterator is an object that you can use ONCE to retrieve all the objects in a collection one by one
		An Iterator<> object encapsulates references to all the objects in the original collection in some sequence.
		An iterator is for one pass through the objects. To access the objects from a collection again, you just obtain another iterator object. 
		Iterable<T> vs Iterator<T>
			Iterable<T> defines a method that returns a reference of type Iterator<T> A class that implements Iterable<T> can make an iterator available.
			Iterator<T> defines the methods that enable the iterator mechanism.
				hasNext()
				next()
				remove()
	ListIterator 
		 Used to traverse a collection of objects backward or forward. Extends to Iterator<T> so all Iterator<T> methods are available
		 Special methods in ListIterator 
			int nextIndex()
				Returns the index of the object that is returned by the next call to next() as type int
				or returns the number of elements in the list if the ListIterator<> object is at the end of the list.
			T previous()
				Returns the previous object in sequence in the list. You use this method to run backward through the list.
			boolean hasPrevious()
				Returns true if the next call to previous()returns an object.
			int previousIndex()()
				Returns the index of the object that is returned by the next call to previous(), or returns -1 if the ListIterator<> object is at the beginning of the list.
	Generic Collection Interfaces
											Iterable<T> 							Map<K,V>
												|										|
											Collection<T>							SortedMap<K,V>
								/				|			\							|
							Set<T>			List<T>		Queue<T>					NavigableMap<K,V>
							SortedSet<T>				Dequeu<T>
							NavigableSet<T>
		Notes
			The map interfaces do not implement the Iterable<T> interface, so you cannot use the collection-based for loop to iterate over the objects in a map.
			Any collection class object that implements the Collection<T> interface can be referenced using a variable of type Collection<T>. 
			This means that any of the list or set collections can be referenced in this way
		INTERFACE TYPE 				IMPLEMENTED BY
		Set<T> 						HashSet<T>, LinkedHashSet<T>, EnumSet<T>
		SortedSet<T> 				TreeSet<T>
		List<T> 					Vector<T>, Stack<T>, ArrayList<T>, LinkedList<T>
		Queue<T> 					PriorityQueue<T>, LinkedList<T>
		Deque<T> 					LinkedList<T>, ArrayDeque<T>
		Map<K,V> 					Hashtable<K,V>, HashMap<K,V>, LinkedHashMap<K,V>, WeakHashMap<K,V>, IdentityHashMap<K,V>, EnumMap<K extends Enum<K>,V>
		SortedMap<K,V> 				TreeMap<K,V>
		NavigableMap<K,V> 			TreeMap<K,V>
	EnumSet<E> Collection
		There are no constructors for EnumSet. 
		You create an EnumSet<E> object by using one of the static factory methods that the class defines.
		Factory Method
			A factory method is a static method that is not a constructor, but nonetheless creates objects. 
			A factory method can provide advantages over a constructor in some situations. 
			For example, it makes it possible to limit the number of objects that may be created. 
			It allows caching of objects so objects may be reused. It also allows a reference to be returned that is an interface type that the object implements. 
		.of() method
			The static of() method in the EnumSet<E> generic class is the factory method. It has 6 overloaded versions
			Five accept one, two, three, four, or five arguments of type E to be stored in the collection. 
			The sixth method uses a varargs parameter list to permit an arbitrary number of arguments of type E. 
			The reason for implementing the of() method as a set of overloads like this is to maximize efficiency when you put a small number of enumeration constants in a set.
			Example:
				EnumSet<StandardOpenOption> set = EnumSet.of(CREATE,WRITE);
		.complementOf() method
			After you have the EnumSet<StandardOpenOption> object, set, you can create another EnumSet<> object that represents the set of constants that are not in set
			EnumSet<StandardOpenOption> setComplement = EnumSet.complementOf(set);
		.noneOf()
			The static noneOf() method creates an empty set that can hold constants of the type you specify as the argument. 
			The expression StandardOpenOption.class specifies the class type for the StandardOpenOption enumeration. 
			You can test for an empty set by calling the isEmpty() method for the object.
			EnumSet<StandardOpenOption> options = EnumSet.noneOf(StandardOpenOption.class);
			options.isEmpty;	//True
		.add()
			options.add(READ);
		.copyOf
			EnumSet<StandardOpenOption> optionsCopy = EnumSet.copyOf(options);
		.allOf
			EnumSet<StandardOpenOption> allOptions = EnumSet.allOf(StandardOpenOption.class);

HashMaps
	Hashing process
		Description
			The implementation of a map in the Java collections framework that is provided by the HashMap<K,V> class.
			It creates an array in which it stores key and object pairs of type K and V respectively.
			The index to this array is produced from the key object by using the hashcode for the object to compute an offset into the array for storing the key/object pair. 
		Bucket
			An entry in the table that is used to store key/value pairs is called a bucket. 
			The hashcode produced from a key selects a particular bucket in which the key/value pair should be stored. 
			Hashing determines where objects are placed in a hash map.
		Collision
			Description
				Every key must be unique, but not every hashcode must be unique
				When two or more keys produce the same hash value, it's called a collision.
				A HashMap<> object deals with collisions by storing all the key/object pairs that have the same hash value in a linked list.
			Process of resolving a collision:
				Step 1.  The key is hashed to find the location where the key/object pair should be. 
				Step 2.  The linked list then has to be searched to sort out the key you are searching on from all the others that have the same hash value. 
			How to avoid collision?
				The price of reducing the possibility of collisions in a hash table is having plenty of empty space in the table.
	HashCode() method
		The Default method
			By default, the hashCode() method is used for the key object. 
			This is inherited in all classes from Object so this is the method that produces the basic hashcode unless the hashCode() method is redefined in the class for the key. 
			The HashMap<> class does not assume that the basic hashcode is adequate.
			To try to ensure that the hashcode that is used has the characteristics required for an efficient map, the basic hashcode is further transformed within the HashMap<> object.
		How the default Object hashCode() method works?
			It usually uses the MEMORY ADDRESS where an object is stored to produce the hash value, so distinct objects always produce different hash values. 
			Probem
				Because of hashcode generated by memory address, different objects that have identical data produce different hash values, so they can't be compared
				A key object hash code will never be the same of another key object's hashcode, even if the data in the two key objects are exactly the same.
				Example
					Create a key object to store the key in a HashMap. It will have a hashCode created based on its memory address.
					Enter a search term from keyboard to create a new key object from the entered data. The new key object will have different hash code than the key object in the HashMap.
			Solution
				Create a hashcode from the instance variables of the object. 
				Then, by comparing the hashcode produced from the data members of the new key object with the hashcodes for the key objects in the hash map, you are able to make a match.
	Using Objects as Keys
		Override equals()
			For objects of one of your own classes to be usable as keys in a hash table, you MUST override the equals() method of the Object class.
			The equals() method is used by methods in the HashMap<> class to determine when two KEYS are equal.
			The overridden equals() method should return true when two different objects contain identical data values.
		Override hashCode()
			You can also override the default hashCode() method, which returns the hash value for the object as type int. 
			Your hashCode() method should produce hashcodes that are reasonably uniform over the possible range of keys and is generally unique for each key.
			Ideal hashcode
				Has a strong probability of being unique to the object
				The hashcodes produced for the range of different objects should be as widely distributed across the range of int values as possible.
		How to generate ideal hashcodes?	
			Combine the values of all the data members in an object to produce the hashcode.
			The following mehtod should produce a reasonable distribution of values that have a good probability of being different for different objects
			Steps
				1. Produce an integer corresponding to each data member 											- int fieldHash1=fieldName.hashcode()
				2. Multiply each of the integers corresponding to the data members by a different prime number		- 7*fieldHash1 
				3. Sum the results. 																				- 7*fieldHash1 + 13 * fieldHash2 + 17* fieldHash3....
			Generating hashCodes from String
				The String class hashCode() implementation produces good hashcode values that are the same for identical strings.
			Generating hashCodes form Integers/Floating-points
				Integers are OK.
				Floating-point data members need a bit of judgment. 
					If they have a small range in integer terms, you need to multiply them by a value that's going to result in a unique integer when they are cast to type int. 
					If they have a very large range in integer terms you might need to scale them down.
			Generating hashCodes for another class Objects
					Wherever a data member is an object of another class rather than a variable of one of the basic types, you need to implement the hashCode() method for that class.
			Example:
				public int hashCode() {
				return 7 * firstName.hashCode() + 13 * surname.hashCode() + 19*age; }						//Generates hashcode based on first name and last name (strings) and age (integer)
		Example
			@Override //Equals																						
				public boolean equals(Object comparedToPerson) {											//Uses the compareTo method to determine whether two Person object is same
					return compareTo((Person)comparedToPerson) == 0; }										//Evaulates TRUE if the compareTo method returns 0
			@Override
				public int hashCode() {
					return 7 * firstName.hashCode() + 13 * surname.hashCode(); }							//Generates hashcode based on first name and last name
			@Override																						//Compares 'Person' objects by surname String field value
				public int compareTo(Person comparedToPerson) {
					int result = this.surname.compareTo(comparedToPerson.surname);							//compares surnames 
					return result == 0 ? this.firstName.compareTo(comparedToPerson.firstName) : result; }	//compares firstnames is surnames equals
	Creating a HashMap<K,V> object
		Constructors
			HashMap()
				The default capacity is 16 objects, and the default load factor is 0.75
				HashMap<String,Person> theMap = new HashMap<>();
			HashMap(int capacity)
				HashMap myMap<String,Person> = new HashMap<>(151); 			//use prime numbers for capacity
			HashMap(int capacity, float loadfactor)
				HashMap<String,Person> aMap = new HashMap<>(151, 0.6f);		//more efficient, but will have more unoccupied space
			HashMap(Map<? extends K, ? extends V> map) 
				Creates a map with the mappings, capacity and load factor of the Map (any map, not hashmap!) object passed as the argument.
		Capacity
			The capacity for a map is simply the number of key/object pairs it can store. 
			The capacity value of the map is combined with the hashcode for the key that you specify to compute the index that determines where an object and its key are to be stored. 
			The capacity increases automatically as necessary, but this is a relatively time-consuming operation. 
			To make this computation produce a good distribution of index values, you should ideally use prime numbers for the capacity of a hash table when you specify it yourself.
			You must always have spare capacity in a map for efficient operation. 
			With too little spare capacity, you have an increased likelihood that keys generate the same bucket index, so collisions become more likely.
		LoadFactor
			The load factor is used to decide when to increase the size of the hash table. 
			When the size of the table reaches a value that is the product(szorzat) of the load factor and the capacity (0.6*151)
			The capacity is increased automatically to twice the old capacity plus on the plus one ensuring it is at least odd, if not prime. 
			The default load factor of 0.75 is a good compromise.
			Example:
				Create a map with a 60% load factor works a bit more efficiently than the default, but at the expense of having more unoccupied space. 
					Capacity: 151
					LoadFactor: 60% 
					Product of capacity and load factor= 151 * 0,6 = 90
				When 90 objects have been stored, the capacity is increased to 303
					New capacity: twice the old capacity plus one: 2*151 = 302 + 1
	Storing, Retrieving, and Removing Objects 
		Storing values to a Map 
			Put single value
				V put(K key, V value)
				Stores the object value in the map using the key specified by the first argument. 
				Value REPLACES ANY EXISTING OBJECT ASSOCIATED WITH KEY, and a reference to the previous object for the key is returned. 
				If no object was previously stored for key or the key was used to store null as an object, null is returned.
				Example
					aMap.put("key", 12345);  //if 'key' was already used, its value will be replaced!
			Put multiple values
				void putAll(Map<? extends K,? extends V> map)
				Transfers all the key/object pairs from map to the current map, replacing any objects that exist with the same keys.
				Does not return (void) anything.
		Retrieving
			V get(Object key)
			Returns the object stored with the same key as the argument. If no object was stored with this key or null was stored as the object, null is returned. 
			Note that the object remains in the map. This is not a Stack!
		Removing
			V remove(Object key): Removes the entry associated with key if it exists and returns a reference to the object. 
			A null is returned if the entry does not exist, or if null was stored using key.
	Processing ALL elements
		Set<K> keySet()
			Returns an object containing all the keys from the map. Can iterate with collection based for-loop
				for(String key : aMap.keySet()) { System.out.println(key); }
		Set<Map.Entry<K,V>> entrySet()
			Returns an object containing the key/object pairs — each pair being an object of type Map.Entry<K,V>.
			Need to iterate to get the methods for each entry
				Set<Map.Entry<K, V>> allEntrySet= aMap.entrySet();
				for (Map.Entry<K, V> currentEntry : allEntrySet) { System.out.println(currentEntry.getKey() + ":" + currentEntry.getValue()); }
				currentEntry.getKey; currentEntry.getValue; currentEntrySetValue(12345);
			A Map.Entry<> object also needs
				an equals() method for comparisons with another Map.Entry<> object passed as an argument 
				and a hashCode() method to compute a hashcode for the Map.Entry object.
		Collection<V> values()
			Returns an object containing all the values stored in the map. Can iterate with collection based for-loop 
				for(Integer i : collection) { System.out.println(i); }

Why the default hashCode() method needs to be overwritten to use the fields of a class to generate hashcodes when storing objects to files?
	Problem:
		WARNING Beware of the default hashCode() method in the Object class when storing maps in a file. 
		The hashcodes are generated from the address of the object, so the hashcode for a key is entirely dependent on where it is stored in memory. 
		Getting a key back from a file in exactly the same place in memory where it was originally stored is almost impossible. 
		When reading a map back from a file, the hashcode generated from a key now used to access the map is different from what was originally produced when stored the object with the key
		Because of this, you will never find the entry in the map to which it corresponds.
	Solution
		You must override the default hashCode() method so that the hashcodes for keys are produced from the data members of the key objects.
		This ensures that the hashcode for a given key is always the same. 
	Source
		Horton, p. 562

Sources for Collections
	Horton Chapter 14, p517
	http://www.dineshonjava.com/2013/05/java-collection-framework.html
	http://www.java2s.com/Tutorial/Java/0140__Collections/Createanemptycollectionobject.html




