File I/O Basics
	After you have written data to a file, what you have is just a linear sequence of bytes. 
	The bytes in a file are referenced by their offset from the beginning, so the first byte is byte 0, the next byte is byte 1, the third byte is byte 2, and so on through to the end of the file.
	If there are n bytes in a file, the last byte is at offset n-1

Imports
	import java.nio.file.Files	
	import static java.nio.file.StandardOpenOption.*

3 ways in the Files class to access files defined in Path:
	1. newOutputStream() - file opened for writing bytes
	2. BufferedWriter() - file opened for writing characters
	3. newByteChannel() - file opended for random access for writing binary or textual data.

2 write() methods
	The Files class also defines two static write() methods that can write either a byte[] array to a file or an Iterable set of lines as characters.	
	

newOutputStream() - Writing Bytes by creating OutputStream object - Files.newOutputStream
	Description
		Wrap to a BufferedOutPutStream object, provide a Path for the target file and optional Standard Open Options.
	Standard Open Options	
		Enumerations to import for Standard Open Options (multiple or no options can be used)
			import static java.nio.file.StandardOpenOption.*; //to import all available options
		Default Options (when no option provided)
			-WRITE (open the file for writing)
			-CREATE (create the file if doesnt exists)
			-TRUNCATE_EXISTING (new data is overwriting existing data)
	Usage
		Open it in a try-with-resources block
		Example:
		try (BufferedOutputStream bos = new BufferedOutputStream(Files.newOutputStream(file, APPEND, CREATE))) {....

newBufferedWriter() - Writing Characters by creating BufferedWriter object - Files.newBufferedWriter
	Description
		The static newBufferedWriter() method in the Files class returns a java.io.BufferedWriter object that you can use to write to a file. 
		A BufferedWriter can only write character data to a file. A BufferedWriter has an internal buffer that ensures that strings and even single characters can be written efficiently.
	Charset
		A java.nio.charset.Charset object determines how Unicode characters are mapped to the sequences of bytes that are written to the file
		Ultimately you are always writing bytes to a file, whatever the type of the original data 
		The charset used to write a file determines what bytes are written for each Unicode character and for reading the same charset that was used when the file was written must be used
	Standard Open Options 
		The same as with OutputStream
	Usage:
		Open it ina try-with-resources block
	Example:
		try (BufferedWriter fileOut = Files.newBufferedWriter(filePath, Charset.forName("UTF-16"), CREATE, APPEND)) {...

Files.newByteChannel()
	Writing files through a Channel. See Channel & Buffers

-------
Sources:
	Ivor Horton: Beginning Java, Chapter 10 - Writing files
	Ron Hitchens: Java NIO
		https://books.google.hu/books?id=z7TQ8NSooS4C&pg=PT59&lpg=PT59&dq=view+buffers+explained+java&source=bl&ots=SXyDoN31xI&sig=Ap5rNfDH1cJab6D0bIa6amQ3vZQ&hl=hu&sa=X&ved=0ahUKEwilzMWj3cTRAhUlJpoKHQ8GCLU4ChDoAQhAMAU#v=onepage&q=view%20buffers%20explained%20java&f=false
